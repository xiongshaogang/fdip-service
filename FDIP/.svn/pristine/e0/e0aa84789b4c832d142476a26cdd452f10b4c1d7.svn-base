/**
 * 
 */
package com.trusdom.fdip.scheduler;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.QuartzJobBean;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.trusdom.fdip.common.Config;
import com.trusdom.fdip.common.Constants;
import com.trusdom.fdip.model.Trade;
import com.trusdom.fdip.model.Trade.Status;
import com.trusdom.fdip.services.AccountFundAmountService;
import com.trusdom.fdip.services.TradeService;
import com.trusdom.fdip.vo.AccountFundAmountJobVo;

/**
 * @author zhihuayang E-mail:425273175@qq.com
 * @date 创建时间：2016年6月30日 下午4:50:22
 * @version 1.0
 * @parameter
 * @return
 */

@Service
@DisallowConcurrentExecution
public class TradeResultJob extends QuartzJobBean {

	private static final Logger LOGGER = LoggerFactory.getLogger(TradeResultJob.class);

	@Autowired
	AccountFundAmountService accountFundAmountService;

	@Autowired
	TradeService tradeService;

	@Autowired
	RestTemplate restTemplate;

	/**
	 * 获取mcip交易确认份额文件,扫描trade记录表对进行中申购记录进行状态修改,若失败则修改状态为失败,
	 * 且accountFundMount在确认失败情况下需要 修改accountfundmount
	 */
	@Override
	protected void executeInternal(JobExecutionContext arg0) throws JobExecutionException {
		String day = Constants.SDF_DATE.format(Calendar.getInstance().getTime());
		String url = Config.getConfigByKey("mcipBaseUrl") + Config.getConfigByKey("ths.verify") + "?tradeDate=" + day;
		try {
			JsonNode response = restTemplate.getForObject(url, JsonNode.class);
			if (response.has("success") && response.get("success").asBoolean()) {
				if (response.has("data") && !response.get("data").isNull()) {
					response = response.get("data");

					String verifyContent = response.get("fileContext").asText();
					String[] contents = verifyContent.split("\n");
					Map<String, AccountFundAmountJobVo> map = new HashMap<String, AccountFundAmountJobVo>();
					for (String result : contents) {
						String[] content = result.split("|");
						if (content[10].equals("4")) {
							Trade trade = tradeService.findByApplyNo(content[0]);
							if (map.get(content[0]) == null) {
								AccountFundAmountJobVo accountFundAmountJobVo = new AccountFundAmountJobVo();
								accountFundAmountJobVo.setAccount(trade.getAccount().getId());
								accountFundAmountJobVo.setAmount(trade.getRealAmount());
								accountFundAmountJobVo.setChannel(trade.getChannel().getId());
								accountFundAmountJobVo.setFund(trade.getFund().getId());
							} else {
								AccountFundAmountJobVo accountFundAmountJobVo = map.get(content[0]);
								accountFundAmountJobVo
										.setAmount(accountFundAmountJobVo.getAmount().add(trade.getRealAmount()));
								map.put(content[0], accountFundAmountJobVo);
							}
							tradeService.updateStatusByTradeNo(trade.getId(), content[0], Status.FAIL);
						}
					}
					for (Map.Entry<String, AccountFundAmountJobVo> entry : map.entrySet()) {
						AccountFundAmountJobVo accountFundAmountJobVo = entry.getValue();
						accountFundAmountService.modifyAccountFundAmount(accountFundAmountJobVo.getAccount(),
								accountFundAmountJobVo.getAmount(), accountFundAmountJobVo.getChannel(),
								accountFundAmountJobVo.getFund(), false);
					}
					// 文件保存
					String fileName = response.get("fileName").asText();
					File file = new File(Constants.VERIFY_FILE_PATH + fileName);
					BufferedWriter bw = new BufferedWriter(new FileWriter(file));
					for (String content : contents) {
						bw.write(content);
						bw.newLine();
					}
					bw.flush();
					if (bw != null) {
						bw.close();
					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("获取交易确认文件失败!! {}", e.getCause());
		}

	}

}
