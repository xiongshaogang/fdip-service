package com.trusdom.fdip.services;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.trusdom.fdip.common.Config;
import com.trusdom.fdip.common.Constants;
import com.trusdom.fdip.model.AccountFundAmount;
import com.trusdom.fdip.model.Channel;
import com.trusdom.fdip.model.verify.Verify;
import com.trusdom.fdip.services.mcip.McipService;
import com.trusdom.fdip.services.mcip.McipThsFundService;

@Service
public class VerifyService {
	private static final Logger LOGGER = LoggerFactory.getLogger(VerifyService.class);
	@Autowired
	McipThsFundService mcipThsFundService;
	@Autowired
	McipService mcipService;
	@Autowired
	AccountService accountService;
	@Autowired
	AccountFundAmountService accountFundAmountService;
	@Autowired
	ChannelService channelService;
	public File download(String url){
		LOGGER.info("开始下载同花顺对账文件...");
		mcipThsFundService.downloadVerifyFile(url);
		String filePath = Constants.VERIFY_FILE_PATH+"filename";
		LOGGER.info("已下载同花顺对账文件: [{}]", filePath);
		return new File("d://tmpconfig.txt");
	}
	
	public void verify(File file) {
		LOGGER.info("开始解析对账文件...");
		if (!file.exists()){
			LOGGER.error("对账文件不存在");
			return;
		}
		BufferedReader reader = null;
		try{
			reader = new BufferedReader(new FileReader(file));
			String header = reader.readLine();
			LOGGER.info("读取文件头信息: [{}]", header);
			String line = null;
			while(null != (line = reader.readLine())){
				LOGGER.info("读取数据内容: [{}]", line);
				if (StringUtils.isBlank(line)) continue;
				singleVerify(line);
			}
		}catch(IOException e){
			e.printStackTrace();
			LOGGER.error("读取对账文件异常!!");
			LOGGER.error("{}",e.getCause());
		}finally{
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public void singleVerify(String line){
		String[] infos = line.split("\\|");
		BigDecimal thsAmount = new BigDecimal(infos[0]);
		String thsTransactionAccountId = infos[6];
		long account = accountService.findAccountIdBy3RD(thsTransactionAccountId);
		Channel channel = channelService.QueryByCode(Constants.CHANNEL_THS);
		AccountFundAmount afa = accountFundAmountService.findByAccountAndChannel(account, channel.getId());
		if (null != afa){
			if (thsAmount.doubleValue() != afa.getAmount().doubleValue()){
				mcipService.sendTplSms(Config.getConfigByKey("verify.err.warning"), "10001", "#name#=123");
			}else{
				
			}
		}else{
		}
	}
	public static void main(String[] args) throws IOException {
		VerifyService vs = new VerifyService();
		vs.verify(new File("d://tmpconfig.txt"));
	}
}
