/**
 * 
 */
package com.trusdom.fdip.common;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 * @author zhihuayang E-mail:425273175@qq.com
 * @date 创建时间：2016年5月11日 上午9:20:59 可以适用于http和https请求
 * @version 1.0
 * @parameter
 * @return
 */

public class HttpUtil {
	private static Logger log = Logger.getLogger(HttpUtil.class);
	
    private static RestTemplate restTemplate=new RestTemplate();

	public static String sendRequest(String url, boolean https, String method, String params, boolean json)
			throws Exception {
		HttpURLConnection conn = null;
		try {
			URL requsturl = new URL(url);
			if (https) {
				conn = (HttpsURLConnection) requsturl.openConnection();
				((HttpsURLConnection) conn).setSSLSocketFactory(SSLUtil.getSSl());
			}
			if (json)
				conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			else
				conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setUseCaches(false);
			conn.setConnectTimeout(3000);
			conn.setReadTimeout(3000);
			conn.setRequestMethod(method);
			if (method.equalsIgnoreCase("POST")) {
				DataOutputStream out = new DataOutputStream(conn.getOutputStream());
				out.write(params.getBytes("UTF-8"));
				out.flush();
				out.close();
			} else
				conn.connect();
			BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String lines;
			StringBuffer sb = new StringBuffer("");
			while ((lines = reader.readLine()) != null) {
				lines = new String(lines.getBytes(), "utf-8");
				sb.append(lines);
			}
			reader.close();
			// 断开连接
			conn.disconnect();
			return sb.toString();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			// 连接异常
			log.error(e.getMessage());
			throw new Exception();
		}
	}

	public static void main(String[] args) throws Exception {
		System.out.println(HttpUtil.sendRequest("https://www.baidu.com", true, "GET", null, false));
	}

	/**
	 * 该方法有返回结果只有get和post方法
	 * 
	 * @param url
	 * @param method
	 * @param request
	 * @param headers
	 * @return
	 * @throws Exception
	 */
	public static String send(String url, String method, Object request, Map<String, String> headers) throws Exception {
		String result = null;
		try {
			log.info("请求地址:" + url);
			if (request != null) {
				log.info("请求body参数:" + request.toString());
			}
			if (headers != null) {
				log.info("请求header参数如下:");
				for (Map.Entry<String, String> entry : headers.entrySet()) {
					log.info(entry.getKey() + ":" + entry.getValue());
				}
			}
			switch (method) {
			case "POST":
				if (headers != null)
					result = restTemplate.postForObject(url, request, String.class, headers);
				else
					result = restTemplate.postForObject(url, request, String.class);
				break;
			case "GET":
				if (headers != null)
					result = restTemplate.getForObject(url, String.class, headers);
				else
					result = restTemplate.getForObject(url, String.class);
				break;
			case "DELETE":
				if (headers != null)
					restTemplate.delete(url, headers);
				else
					restTemplate.delete(url);
				break;
			case "PUT":
				if (headers != null)
					restTemplate.put(url, request, headers);
				else
					restTemplate.put(url, request);
				break;
			default:
				log.error("请求方式不正确,注意请求方式只支持大写的POST.GET.PUT.DELETE");
				break;
			}
			log.info("请求返回结果:" + result);
			// return Json.fromJson(Json.parse(result), response);
			return result;
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new Exception(e.getMessage());
		}
	}
}

/**
 * 生成sslfactroy
 * 
 * @author lenovo
 *
 */
class SSLUtil {

	static final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
		public X509Certificate[] getAcceptedIssuers() {
			return null;
		}

		public void checkClientTrusted(X509Certificate[] certs, String authType) {
		}

		public void checkServerTrusted(X509Certificate[] certs, String authType) {
		}
	} };

	static SSLSocketFactory getSSl() throws NoSuchAlgorithmException, KeyManagementException, NoSuchProviderException {
		SSLContext sc = SSLContext.getInstance("TLS");
		// SSLContext sc = SSLContext.getInstance("SSL", "SunJSSE");
		sc.init(null, trustAllCerts, new SecureRandom());
		return sc.getSocketFactory();
	}

}