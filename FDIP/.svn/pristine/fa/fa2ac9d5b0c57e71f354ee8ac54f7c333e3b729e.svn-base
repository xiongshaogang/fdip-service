/**
 * 
 */
package com.trusdom.fdip.services;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.trusdom.fdip.common.CodeBuilder;
import com.trusdom.fdip.common.Config;
import com.trusdom.fdip.common.HttpUtil;
import com.trusdom.fdip.common.Json;
import com.trusdom.fdip.form.BuyOrRedeForm;
import com.trusdom.fdip.mappers.SgeditMapper;
import com.trusdom.fdip.model.Account;
import com.trusdom.fdip.model.AccountFundAmount;
import com.trusdom.fdip.model.Channel;
import com.trusdom.fdip.model.Fund;
import com.trusdom.fdip.model.Sgedit;
import com.trusdom.fdip.model.Trade;
import com.trusdom.fdip.model.Trade.Status;
import com.trusdom.fdip.vo.AvaiableAmountVo;
import com.trusdom.fdip.vo.RedeResultVo;
import com.trusdom.fdip.vo.ThsMcipFastRedeRequestVo;
import com.trusdom.fdip.vo.ThsMcipFastRedeResponseVo;
import com.trusdom.fdip.vo.ThsMcipModifyRequestVo;
import com.trusdom.fdip.vo.ThsMcipModifyResponseVo;
import com.trusdom.fdip.vo.ThsMcipTotalAmountResponseVo;
import com.trusdom.fdip.vo.UserVo;

/**
 * @author zhihuayang E-mail:425273175@qq.com
 * @date 创建时间：2016年5月18日 下午4:27:59
 * @version 1.0
 * @parameter
 * @return
 */
@Service
public class RedeFundService {

	private static Logger log = Logger.getLogger(RedeFundService.class);

	private static final String MCIPURL = Config.getConfigByKey("mcipBaseUrl", "");

	private static final String CBIPURL = Config.getConfigByKey("cbipBaseUrl", "");

	@Autowired
	SgeditMapper sgeditMapper;

	@Autowired
	ChannelService channelService;
	
	@Autowired
	FundService fundService;

	@Autowired
	AccountService accountService;

	@Autowired
	UserVoService userVoService;

	@Autowired
	AccountFundAmountService accountFundAmountService;

	@Autowired
	TradeService tradeService;

	/**
	 * 获取持仓收益
	 * 
	 * @param userVo
	 * @param fundCode
	 * @return
	 * @throws Exception
	 */
	private ThsMcipTotalAmountResponseVo getThsMcipTotalAmount(UserVo userVo, String fundCode) throws Exception {
		String url = MCIPURL + "/ths/profile?transActionAccountId=" + userVo.getTransActionAccountId() + "&userid="
				+ userVo.getUserId() + "&fundCode=" + fundCode
				+ "&transactioncfmdate=20160616" /* + sf.format(new Date()) */;
		ThsMcipTotalAmountResponseVo thsMcipTotalAmountResponseVo = Json
				.fromJson(Json.parse(HttpUtil.send(url, "GET", null, null)), ThsMcipTotalAmountResponseVo.class);
		return thsMcipTotalAmountResponseVo;
	}

	/**
	 * 同花顺份额修改
	 * 
	 * @param trade
	 * @param mount
	 * @param userVo
	 * @throws Exception
	 */
	private String thsModifyAmount(Trade trade, String mount, UserVo userVo, String txTraceNo) throws Exception {
		ThsMcipModifyRequestVo thsMcipModifyRequestVo = new ThsMcipModifyRequestVo();
		thsMcipModifyRequestVo.setAppsheetSerialNo(trade.getExtTradeNo());
		thsMcipModifyRequestVo.setNewApplicationAmount(mount);
		thsMcipModifyRequestVo.setTradePassword(userVo.getTradePassword());
		thsMcipModifyRequestVo.setTransActionAccountId(userVo.getTransActionAccountId());
		thsMcipModifyRequestVo.setUserid(userVo.getUserId());
		thsMcipModifyRequestVo.setTxTraceNo(txTraceNo);
		ThsMcipModifyResponseVo thsMcipModifyResponse = Json.fromJson(
				Json.parse(HttpUtil.send(MCIPURL + "/ths/tradeMoney", "POST", thsMcipModifyRequestVo, null)),
				ThsMcipModifyResponseVo.class);
		if (thsMcipModifyResponse.getData() == null)
			throw new RuntimeException();
		else
			return thsMcipModifyResponse.getData().getAppsheetSerialNo();
	}
	
	/**
	 * T+0快速赎回
	 * 
	 * @param buyOrRedeForm
	 * @param userVo
	 * @param canuse
	 * @throws Exception
	 */
	public String fastRede(BuyOrRedeForm buyOrRedeForm, UserVo userVo, BigDecimal amount) throws Exception {
		ThsMcipFastRedeRequestVo thsMcipFastRedeRequestVo = new ThsMcipFastRedeRequestVo();
		thsMcipFastRedeRequestVo.setFundCode(buyOrRedeForm.getFundCode());
		thsMcipFastRedeRequestVo.setTransActionAccountId(userVo.getTransActionAccountId());
		thsMcipFastRedeRequestVo.setLargeRedemptionSelect("0");
		thsMcipFastRedeRequestVo.setTradePassword(userVo.getTradePassword());
		thsMcipFastRedeRequestVo.setMoney(amount.toString());
		thsMcipFastRedeRequestVo.setMobileTelNo(/* userVo.getPhone() */"13161257571");
		thsMcipFastRedeRequestVo.setUserid(userVo.getUserId());
		thsMcipFastRedeRequestVo.setTxTraceNo(buyOrRedeForm.getTradeNo());
		ThsMcipFastRedeResponseVo thsMcipFastRedeResponseVo = Json.fromJson(
				Json.parse(HttpUtil.send(MCIPURL + "/ths/fastRedemption", "POST", thsMcipFastRedeRequestVo, null)),
				ThsMcipFastRedeResponseVo.class);
		if (thsMcipFastRedeResponseVo.getData() != null)
			throw new Exception();
		else
			return thsMcipFastRedeResponseVo.getData().getAppsheetSerialNo();
	}

	/**
	 * 添加修改
	 * 
	 * @param mount
	 * @param tradeId
	 */
	private void addSgedit(BigDecimal mount, Long tradeId) {
		Sgedit sgedit = new Sgedit();
		sgedit.setAmount(mount);
		sgedit.setCreateTime(new Date());
		sgedit.setTrade(tradeId);
		sgeditMapper.add(sgedit);
	}

	/**
	 * 修改份额包装 缺少操作cbip資金劃撥,是一次性劃撥還是多次劃撥
	 * 
	 * @param trades
	 * @param mount
	 * @throws Exception
	 */
	private String modifyamount(List<Trade> trades, BigDecimal mount, UserVo userVo) throws Exception {
		StringBuffer sb = new StringBuffer("");
		for (Trade trade : trades) {
			if (trade.getSgAmount().doubleValue() >= mount.doubleValue()) {
				// 調用同花順修改
				sb.append(thsModifyAmount(trade, mount.toString(), userVo, CodeBuilder.generatorTradeNo(null)));
				// 更新trade记录
				tradeService.updateTradeAmount(trade.getSgAmount().subtract(mount), new Date(), trade.getId());
				// 添加修改记录
				addSgedit(mount, trade.getId());
				break;
			} else {
				// 調用同花順修改
				sb.append(thsModifyAmount(trade, trade.getSgAmount().toString(), userVo,
						CodeBuilder.generatorTradeNo(null)) + ",");
				mount = mount.subtract(trade.getSgAmount());
				// 更新trade记录
				tradeService.updateTradeAmount(new BigDecimal("0.00"), new Date(), trade.getId());
				// 添加修改记录
				addSgedit(trade.getSgAmount(), trade.getId());
			}
		}
		return sb.toString();
	}



	/**
	 * 赎回规则为可修改份额足够,赎回可修改份额,快速赎回和可修改份额和利息之和是否大于修改份额,足够则两条路并行操作,不够则提示用户可修改份额
	 * 
	 * @param buyOrRedeForm
	 * @throws Exception
	 */
	@Transactional(rollbackFor = { Exception.class, RuntimeException.class })
	public RedeResultVo RedeThs(BuyOrRedeForm buyOrRedeForm) throws Exception {
		buyOrRedeForm.setTradeNo(CodeBuilder.generatorTradeNo(null));
		// 获取可赎回金额
		RedeResultVo redeFundVo = new RedeResultVo();
		Channel channel = channelService.QueryByCode(buyOrRedeForm.getChannel());
		if (null == channel){
			redeFundVo.createError("channel.illegal");
			return redeFundVo;
		}
		Account account = accountService.queryAccountByAccountNo(buyOrRedeForm.getAccountNo());
		if (account == null) {
			redeFundVo.createError("account.notFound");
			return redeFundVo;
		}
		Fund fund = fundService.queryByCode(buyOrRedeForm.getFundCode());
		if (fund == null) {
			redeFundVo.createError("fund.notfund");
			return redeFundVo;
		}
		AccountFundAmount accountFundAmount = accountFundAmountService.findByAccountAndChannel(account.getId(),
				fund.getChannel().getId());
		if (accountFundAmount.getAmount().doubleValue() >= buyOrRedeForm.getAmount().doubleValue()) {
			UserVo userVo = userVoService.finduserVo(buyOrRedeForm.getAccountNo(), fund.getChannel().getId());
			Trade redeTrade = tradeService.addRedeTrade(buyOrRedeForm.getAmount(), buyOrRedeForm.getTradeNo(),
					channel, fund, userVo.getAccount3RD());
			List<Trade> trades = tradeService.findTotalmodify(userVo.getAccount3RD(), fund.getId(), new Date());
			BigDecimal canuse = new BigDecimal("0.00");
			for (Trade trade : trades) {
				canuse = canuse.add(trade.getSgAmount());
			}
			// 查看可修改份额是否足够
			if (canuse.doubleValue() >= buyOrRedeForm.getAmount().doubleValue()) {
				try {
					String extTradeNo = modifyamount(trades, buyOrRedeForm.getAmount(), userVo);
					tradeService.updateTradeStatus(Status.SUCCESS, extTradeNo, new Date(), redeTrade.getId());
					// 修改余额
					accountFundAmountService.modifyAccountFundAmount(account.getId(), buyOrRedeForm.getAmount(),
							fund.getChannel().getId(), fund.getId());
				} catch (Exception e) {
					tradeService.updateTradeStatus(Status.FAIL, "", new Date(), redeTrade.getId());
				}
			}
			// 查看两者之和是否足够,不够抛出异常提示赎回失败
			else {
				try {
					ThsMcipTotalAmountResponseVo thsMcipTotalAmountResponseVo = getThsMcipTotalAmount(userVo,
							buyOrRedeForm.getFundCode());
					if (canuse.add(new BigDecimal(thsMcipTotalAmountResponseVo.getData().getConfirmedvol()))
							.compareTo(buyOrRedeForm.getAmount()) >= 0) {
						// 发送快速赎回
						String extfastTradeNo = fastRede(buyOrRedeForm, userVo,
								buyOrRedeForm.getAmount().subtract(canuse));
						// 所有的可修改全部发送到同花顺,剩下的金额调用t+0快速赎回
						String extTradeNo = modifyamount(trades, canuse, userVo);
						tradeService.updateTradeStatus(Status.SUCCESS, extfastTradeNo + "," + extTradeNo, new Date(),
								redeTrade.getId());
						accountFundAmountService.modifyAccountFundAmount(account.getId(), buyOrRedeForm.getAmount(),
								fund.getChannel().getId(), fund.getId());
					} else {
						tradeService.updateTradeStatus(Status.FAIL, "", new Date(), redeTrade.getId());
						redeFundVo.createError("fund.amount");
					}
				} catch (Exception e) {
					tradeService.updateTradeStatus(Status.FAIL, "", new Date(), redeTrade.getId());
					log.error(e.getMessage());
					redeFundVo.createError("fund.rede.error");
				}
			}
		} else
			redeFundVo.createError("fund.amount");
		return redeFundVo;
	}

	/**
	 * 查询可赎回金额
	 * 
	 * @param cardNo
	 * @param fundCode
	 * @return
	 */
	public AvaiableAmountVo findAvaiableAmount(String accountNo, String fundCode) {
		AvaiableAmountVo avaiableAmountVo = new AvaiableAmountVo();
		try {
			Account account = accountService.queryAccountByAccountNo(accountNo);
			if (account == null) {
				avaiableAmountVo.createError("account.notFound");
				return avaiableAmountVo;
			}
			Fund fund = fundService.queryByCode(fundCode);
			if (fund == null) {
				avaiableAmountVo.createError("fund.notfund");
				return avaiableAmountVo;
			}
			UserVo userVo = userVoService.finduserVo(accountNo, fund.getChannel().getId());
			List<Trade> trades = tradeService.findTotalmodify(userVo.getAccount3RD(), fund.getId(), new Date());
			BigDecimal canuse = new BigDecimal("0.00");
			for (Trade trade : trades) {
				canuse = canuse.add(trade.getSgAmount());
			}
			ThsMcipTotalAmountResponseVo thsMcipTotalAmountResponseVo = getThsMcipTotalAmount(userVo, fundCode);
			avaiableAmountVo
					.setAmount(canuse.add(new BigDecimal(thsMcipTotalAmountResponseVo.getData().getConfirmedvol())));
			avaiableAmountVo.setFundCode(fundCode);
			avaiableAmountVo.setAccountNo(accountNo);
		} catch (Exception e) {
			log.error(e.getMessage());
			avaiableAmountVo.createError("global.systemError");
		}
		return avaiableAmountVo;
	}

}
