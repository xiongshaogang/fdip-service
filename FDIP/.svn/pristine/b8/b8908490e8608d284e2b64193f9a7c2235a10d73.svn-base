package com.trusdom.fdip.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.net.URLEncoder;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.trusdom.fdip.common.Json;
import com.trusdom.fdip.services.CommonService;
import com.trusdom.fdip.services.VerifyService;
import com.trusdom.fdip.services.cbip.AccountTransferService;
import com.trusdom.fdip.vo.BaseVo;

@Controller
@RequestMapping("/i")
public class CommonController {

	private static final Logger LOGGER = LoggerFactory.getLogger(CommonController.class);
	
	@Autowired
	CommonService commonService;
	
	@Autowired
	VerifyService verifyService;
	
	@Autowired
	AccountTransferService accountTransferService;
	@RequestMapping("/ths/query/{applyNo}/transfer")
	public @ResponseBody BaseVo capitalTransferQuery(@PathVariable String applyNo){
		LOGGER.info("资金划拨查询; applyNo: [{}]", applyNo);
		BaseVo result = commonService.capitalTransferQuery(applyNo);
		LOGGER.info("资金划拨查询, 返回结果: [{}]", result);
		return result;
	}
	
	
	@RequestMapping("/ths/capital/verify")
	public void capitalVerify(HttpServletResponse response) throws IOException{
		File file = verifyService.generateVerifyFile();
		response.setHeader("Content-Disposition",
				"attachment;filename="+ URLEncoder.encode(file.getName(), "UTF-8"));
		FileInputStream inputStream = new FileInputStream(file);
        byte[] data = new byte[(int)file.length()];
        int length = inputStream.read(data);
        inputStream.close();

        response.setContentType("text/plain");

        OutputStream stream = response.getOutputStream();
        stream.write(data);
        stream.flush();
        stream.close();
	}
	@RequestMapping("/verify/download")
	public @ResponseBody String download(){
		verifyService.verify(verifyService.download(""));
		return "success";
	}
	
	@RequestMapping("/test")
	public @ResponseBody String test(){
		return "";
	}
}
