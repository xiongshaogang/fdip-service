package com.trusdom.fdip.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.trusdom.fdip.common.Json;
import com.trusdom.fdip.model.Account3RD;
import com.trusdom.fdip.model.Trade;
import com.trusdom.fdip.model.Trade.Status;
import com.trusdom.fdip.model.account3RD.ThsAccount;
import com.trusdom.fdip.services.Account3RDService;
import com.trusdom.fdip.services.AccountFundAmountService;
import com.trusdom.fdip.services.TradeService;
import com.trusdom.fdip.services.VerifyService;
import com.trusdom.fdip.vo.BaseVo;

@Controller
@RequestMapping("/notify")
public class TradeNotifyController {
	private static final Logger LOGGER = LoggerFactory.getLogger(TradeNotifyController.class);
	
	@Autowired
	VerifyService verifyService;
	
	@Autowired
	TradeService tradeService;
	
	@Autowired
	Account3RDService account3RDService;
	
	@Autowired
	AccountFundAmountService accountFundAmountService;
	@RequestMapping("/ths/fundTrade/result")
	public @ResponseBody String fundTradeNotify(){
		new Thread(new Runnable() {
			public void run() {
				//同步交易记录状态
				doFundTradeNotify();
				//对账
				verifyService.verify();
			}
		}).start();
		return "OK";
	}
	
	private void doFundTradeNotify(){
		LOGGER.info("");
		File file = verifyService.download("mx");
		LOGGER.info("开始解析交易确认结果文件...");
		if (!file.exists()){
			LOGGER.error("交易确认结果文件不存在");
			return;
		}
		BufferedReader reader = null;
		try{
			reader = new BufferedReader(new FileReader(file));
			String header = reader.readLine();
			LOGGER.info("读取文件头信息: [{}]", header);
			String line = null;
			while(null != (line = reader.readLine())){
				LOGGER.info("读取数据内容: [{}]", line);
				if (StringUtils.isBlank(line)) continue;
				syncTrade(line);
			}
		}catch(IOException e){
			e.printStackTrace();
			LOGGER.error("读取对账文件异常!!");
			LOGGER.error("{}",e.getCause());
		}finally{
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 同步交易记录状态
	 * 对于申购类型, 如果确认失败, 还需要同步基金账户余额(份额, 因为对于确认失败的申购, 同花顺会直接将申购份额退款至998账户)
	 * @param line
	 */
	private void syncTrade(String line){
		String[] infos = line.split("\\|");
		String tradeNo = infos[0];
		String extTradeNo = infos[1];
		String confirmFlag = infos[10];
		String type = (infos[12].equals("122"))?"申购":"赎回";
		Trade trade = tradeService.findByTradeNo(tradeNo);
		Long trdAccountId = trade.getThrdAccount();
		Account3RD account3RD = account3RDService.findById(trdAccountId);
		Status status = Status.SUCCESS;
		if (confirmFlag.equals("4")){
			LOGGER.warn("交易流水为[{}]的[{}]业务确认失败!!", tradeNo, type);
			status = Status.FAIL;
			accountFundAmountService.modifyAccountFundAmount(account3RD.getAccount().getId(), trade.getRealAmount(), trade.getChannel().getId(), trade.getFund().getId(), false);
		}else{
		}
		tradeService.updateStatusByTradeNo(trade.getId(), tradeNo, status);
	}
}
