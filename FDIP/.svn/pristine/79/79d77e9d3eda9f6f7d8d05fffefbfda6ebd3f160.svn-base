package com.trusdom.fdip.scheduler;

import java.util.List;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.QuartzJobBean;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.trusdom.fdip.common.Constants;
import com.trusdom.fdip.common.Json;
import com.trusdom.fdip.model.Account3RD;
import com.trusdom.fdip.model.Channel;
import com.trusdom.fdip.model.Channel.Code;
import com.trusdom.fdip.model.Trade;
import com.trusdom.fdip.model.Trade.Status;
import com.trusdom.fdip.model.account3RD.ThsAccount;
import com.trusdom.fdip.services.Account3RDService;
import com.trusdom.fdip.services.AccountFundAmountService;
import com.trusdom.fdip.services.ChannelService;
import com.trusdom.fdip.services.TradeService;
import com.trusdom.fdip.services.mcip.McipThsFundService;

@Service
@DisallowConcurrentExecution
public class SyncTradeJob extends QuartzJobBean{
	private static final Logger LOGGER = LoggerFactory.getLogger(SyncTradeJob.class);
	private static final Code CHANNEL = Code.THS;
	
	@Autowired
	TradeService tradeService;
	
	@Autowired
	ChannelService channelService;
	
	@Autowired
	McipThsFundService mcipThsFundService;
	
	@Autowired
	Account3RDService account3RDService;
	
	@Autowired
	AccountFundAmountService accountFundAmountService;
	@Override
	protected void executeInternal(JobExecutionContext ctx)
			throws JobExecutionException {
		long start = System.currentTimeMillis();
		LOGGER.info("正在同步同花顺基金进行中的交易...");
		Channel channel = channelService.QueryByCode(Constants.CHANNEL_THS);
		List<Trade> trades = tradeService.queryByChannelAndStatus(channel.getId(), Status.INPROGRESS);
		//TODO: 看情况是否需要多线程处理
		for (Trade trade : trades) {
			LOGGER.info("正在同步交易流水为:[{}]的交易记录;", trade.getTradeNo());
			Long trdAccountId = trade.getThrdAccount();
			Account3RD account3RD = account3RDService.findById(trdAccountId);
			ThsAccount thsAccount = Json.fromJson(Json.parse(account3RD.getAccountInfo()), ThsAccount.class);
			JsonNode detail = mcipThsFundService.purchaseDetail(thsAccount.getCustId(), trade.getTradeNo());
			//未确认 或者已撤单 或者作废; 通常情况下我们 只会出现未确认和已确认
			String confirmflag = detail.get("confirmflag").asText("0");
			if (confirmflag.equals("3")){//获取未确认状态, 修改交易状态为失败,并同步修改账户余额
				LOGGER.info("交易流水号为[{}]交易确认失败!!");
				tradeService.updateStatusByTradeNo(trade.getId(), trade.getTradeNo(), Status.FAIL);
				accountFundAmountService.modifyAccountFundAmount(trade.getAccount().getId(), trade.getRealAmount(), trade.getChannel().getId(), trade.getFund().getId(), false);
			}
		}
		long end = System.currentTimeMillis();
		LOGGER.info("同步同花顺基金进行中的交易完毕! 共耗时:[{}]ms", (end-start));
	}

}
